function [ir] = createFit4(ms, nmod, ws, mp, h )
% JAH 9/2020 make a fit between Noise Model and Real Data
% ms = wspeed for noise model
% nmod = dB noise for model
% ws = windspeed for real data
% mp = noiseleve for real data
%CREATEFIT4(XDATA,YDATA)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : ms
%      Y Output: nmod
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 19-Sep-2020 13:29:43


%% Fit: 'fir to noise model'.
[xData, yData] = prepareCurveData( ms, nmod );
% fit the Noise Model
ft = fittype( 'poly5' );
opts = fitoptions( 'Method', 'LinearLeastSquares' );
opts.Normalize = 'on';
opts.Robust = 'LAR';
[fitresult, gof] = fit( xData, yData, ft, opts );
% find residual between model fit and real data
resid = [];
for i = 1 : length(mp)
resid(i) = mp(i) - fitresult(ws(i));
end
std95 = 2*std(resid);
ir1 = find(abs(resid) < std95);
irhigh = find(resid < std95);
resid2 = resid(ir1);
std952 = 2*std(resid2);
ir2 = find(abs(resid2) < std952);
ir = ir1(ir2);
% Plot fit with data.
plot(h,ws(ir),mp(ir),'bo')
plot(fitresult,'k');
% plot(fitresult, xData, yData );
xlim([0 1.05*max(ws)]);
xlabel( 'wind speed', 'Interpreter', 'none' );
ylabel( 'Noise dB', 'Interpreter', 'none' );  grid on
% figure;
% histogram(resid(ir(ir2)),1000)
% legend( h, 'ydata vs. xdata', 'untitled fit 1', 'Location', 'NorthEast', 'Interpreter', 'none' );
% abel axes



